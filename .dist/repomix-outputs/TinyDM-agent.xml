This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.dockerignore
.env.example
.gitignore
database.py
Dockerfile
main.py
README.md
requirements.txt
setup-tinyDM.ps1
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".dockerignore">
__pycache__
.env
venv
</file>

<file path=".env.example">
# API Configuration
HOST=localhost
PORT=8001
BEARER_TOKEN=your_bearer_token_here

# Gemini API
GEMINI_API_KEY=your_gemini_api_key_here

# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_KEY=your_supabase_anon_key
</file>

<file path=".gitignore">
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
env/
ENV/
.env

# IDE
.idea/
.vscode/
*.swp
*.swo
.DS_Store

# Logs
*.log
logs/

# Local development
.env.local
.env.development.local
.env.test.local
.env.production.local

# Coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# pytest
.pytest_cache/

# Jupyter Notebook
.ipynb_checkpoints

# Distribution / packaging
.Python
*.pyc
*.pyo
*.pyd
.Python
*.so
</file>

<file path="database.py">
from supabase import create_client
import os
from dotenv import load_dotenv
from typing import Dict, Any
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize Supabase client with service role key for admin access
supabase = create_client(
    os.getenv("SUPABASE_URL", ""),
    os.getenv("SUPABASE_KEY", "")  # Use the anon key
)

async def store_message(session_id: str, message: Dict[str, Any]) -> bool:
    """Store a message in the database."""
    try:
        data = supabase.table("messages").insert({
            "session_id": session_id,
            "message": message
        }).execute()
        
        if hasattr(data, 'error') and data.error:
            logger.error(f"Error storing message: {data.error}")
            return False
            
        logger.info(f"Successfully stored message for session {session_id}")
        return True
    except Exception as e:
        logger.error(f"Error storing message: {e}")
        return False

async def get_session_messages(session_id: str) -> list:
    """Retrieve all messages for a given session."""
    try:
        response = supabase.table("messages")\
            .select("*")\
            .eq("session_id", session_id)\
            .order("created_at")\
            .execute()
            
        if hasattr(response, 'error') and response.error:
            logger.error(f"Error retrieving messages: {response.error}")
            return []
            
        return response.data
    except Exception as e:
        logger.error(f"Error retrieving messages: {e}")
        return []
</file>

<file path="Dockerfile">
FROM ottomator/base-python:latest

# Build argument for port with default value
ARG PORT=8001
ENV PORT=${PORT}

WORKDIR /app

# Copy requirements first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
COPY . .

# Expose the port from build argument
EXPOSE ${PORT}

# Command to run the application
# Feel free to change sample_supabase_agent to sample_postgres_agent
CMD ["sh", "-c", "uvicorn main:app --host 0.0.0.0 --port ${PORT}"]
</file>

<file path="main.py">
from fastapi import FastAPI, Header, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import os
from google import genai
from database import store_message, get_session_messages
import base64
from typing import Dict, Any, List, Optional
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize FastAPI
app = FastAPI(title="TinyDM")

# Initialize Gemini with new SDK
try:
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        raise ValueError("GEMINI_API_KEY not found in environment variables")
    
    client = genai.Client(api_key=api_key)
    
    # Test the model
    test_response = client.models.generate_content(model='gemini-2.0-flash-exp', contents='Hello')
    if test_response and test_response.text:
        logger.info("Gemini model initialized and tested successfully")
    else:
        raise ValueError("Model test failed - empty response")
except Exception as e:
    logger.error(f"Error initializing Gemini: {str(e)}")
    raise

class FileUpload:
    def __init__(self, name: str, type: str, base64: str):
        self.name = name
        self.type = type
        self.base64 = base64

    def validate(self) -> bool:
        # Check file size (5MB limit)
        file_size = len(self.base64) * 3 / 4  # Approximate size of decoded base64
        return file_size <= 5 * 1024 * 1024  # 5MB in bytes

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

async def handle_dm_request(request: Dict[str, Any], authorization: str = None):
    # Validate bearer token
    if authorization != f"Bearer {os.getenv('BEARER_TOKEN')}":
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        # Extract request information
        query = request.get("query")
        session_id = request.get("session_id")
        user_id = request.get("user_id")
        request_id = request.get("request_id")
        files = request.get("files", [])
        
        logger.info(f"Received request - Session: {session_id}, User: {user_id}, Request: {request_id}")
        
        if not all([query, session_id, user_id, request_id]):
            raise HTTPException(status_code=400, detail="Missing required fields")

        # Check if this is the first message in the session
        session_messages = await get_session_messages(session_id)
        is_first_message = len(session_messages) == 0

        # If this is the first message, send a welcome message
        if is_first_message:
            welcome_message = {
                "type": "ai",
                "content": """Greetings, brave adventurer! üé≤‚ú® I am TinyDM, your companion in the realms of imagination. How may I assist you today?

I can help you with:
üó°Ô∏è Creating combat encounters
üè∞ Generating vivid location descriptions
üë• Crafting memorable NPCs
üêâ Detailing fearsome monsters
‚ú® Explaining spells and magic
üìñ Clarifying rules and mechanics
üåç Building entire worlds and campaigns

Or perhaps you seek something else? Whatever your quest, I'm here to guide you through the infinite possibilities of D&D!"""
            }
            # This first message will be the description for the agent and displayed as the first message in the studio
            # await store_message(session_id, welcome_message)

        # Validate files if present
        if files:
            if len(files) > 5:  # Max 5 files per message
                raise HTTPException(status_code=400, detail="Too many files")
            
            for file in files:
                file_obj = FileUpload(**file)
                if not file_obj.validate():
                    raise HTTPException(status_code=400, detail=f"File {file_obj.name} exceeds size limit")

        # Store user message
        user_message = {
            "type": "human",
            "content": query
        }
        await store_message(session_id, user_message)
        logger.info("Stored user message")

        # Check if user is asking for help
        help_keywords = ["help", "what can you do", "capabilities", "what do you do", "assist"]
        is_help_request = any(keyword in query.lower() for keyword in help_keywords)
        
        if is_help_request:
            ai_response = """Greetings, brave adventurer! üé≤‚ú® I am TinyDM, your companion in the realms of imagination. How may I assist you today?

I can help you with:
üó°Ô∏è Creating combat encounters
üè∞ Generating vivid location descriptions
üë• Crafting memorable NPCs
üêâ Detailing fearsome monsters
‚ú® Explaining spells and magic
üìñ Clarifying rules and mechanics
üåç Building entire worlds and campaigns

Or perhaps you seek something else? Whatever your quest, I'm here to guide you through the infinite possibilities of D&D!"""
        else:
            # Generate response using Gemini
            system_prompt = """You are TinyDM, a Dungeons & Dragons assistant. You help players and DMs with rules, 
            character creation, story ideas, and general D&D knowledge. Be concise but helpful, and maintain the fantasy atmosphere 
            in your responses. If you're not sure about something, say so rather than making up incorrect information."""
            
            prompt = f"{system_prompt}\n\nUser: {query}\nAssistant:"
            
            try:
                logger.info("Generating response with Gemini")
                response = client.models.generate_content(model='gemini-2.0-flash-exp', contents=prompt)
                if not response:
                    raise ValueError("Empty response from Gemini")
                ai_response = response.text
                logger.info("Generated AI response successfully")
            except Exception as e:
                logger.error(f"Error generating response: {str(e)}")
                raise HTTPException(status_code=500, detail=f"Error generating response: {str(e)}")

        # Store AI response
        ai_message = {
            "type": "ai",
            "content": ai_response
        }
        await store_message(session_id, ai_message)
        logger.info("Stored AI response")
        
        return {
            "success": True
        }
    
    except Exception as e:
        logger.error(f"Error in handle_dm_request: {str(e)}")
        return {
            "success": False,
            "error": str(e)
        }

# Root endpoint for Agent0
@app.post("/")
async def root(request: Dict[str, Any], authorization: str = Header(None)):
    return await handle_dm_request(request, authorization)

# Keep the original endpoint as an alias
@app.post("/api/dm-assistant")
async def dm_assistant(request: Dict[str, Any], authorization: str = Header(None)):
    return await handle_dm_request(request, authorization)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=os.getenv("HOST", "localhost"),
        port=int(os.getenv("PORT", 8001)),
        reload=True
    )
</file>

<file path="README.md">
# TinyDM    

Author: [Michael Hightower](https://github.com/Cmhight03/TinyDM)

A lightweight, chat-based Dungeon Master assistant that helps DMs create and manage D&D 5E sessions through natural conversation. TinyDM integrates with autogen_studio to provide creative content generation, rules assistance, and improvisational support.  (Be kind - this is my "Hello World")

## Features

- üé≤ Quick encounter generation
- üé≠ NPC creation and personality development
- üè∞ Dynamic location descriptions
- üìö D&D 5E rules clarification
- ‚öîÔ∏è Tactical combat suggestions
- üåü Creative story elements and plot hooks

## Setup Guide

1. **Prerequisites**
   - Python 3.11+
   - PowerShell (Windows)
   - Supabase account (create one at https://supabase.com)
   - Google Cloud account with Gemini API access (set up at https://cloud.google.com)

2. **Installation**
   ```powershell
   # Clone the repository
   git clone https://github.com/Cmhight03/TinyDM.git
   cd TinyDM

   # Create and activate virtual environment
   python -m venv venv
   .\venv\Scripts\Activate

   # Install dependencies
   pip install -r requirements.txt
   ```

3. **Configuration**
   Create a `.env` file in the project root with your credentials:
   ```env
   # API Configuration
   HOST=localhost
   PORT=8001
   BEARER_TOKEN=your_secure_token_here

   # Gemini API
   GEMINI_API_KEY=your_gemini_api_key_here

   # Supabase Configuration
   SUPABASE_URL=your_project.supabase.co
   SUPABASE_KEY=your_anon_key
   ```

   Required steps:
   1. Create a Supabase project and copy your project URL and anon key
   2. Set up a Google Cloud project and enable the Gemini API
   3. Generate a secure bearer token for API authentication

4. **Starting the Server**
   ```powershell
   # Ensure virtual environment is activated
   .\venv\Scripts\Activate

   # Start the FastAPI server
   uvicorn main:app --host localhost --port 8001 --reload
   ```

   The server will be available at `http://localhost:8001`

## User Guide

### Getting Started

TinyDM uses natural language processing to understand and respond to your needs. Simply describe what you want in conversational terms.

### Core Commands

1. **Encounter Generation**
   ```
   "Create an encounter for 4 level 3 players in a forest"
   "I need a random dungeon battle"
   "Generate a hard combat for level 5 players"
   ```

2. **Location Description**
   ```
   "Describe a bustling tavern"
   "Create a creepy dungeon entrance"
   "Help me design a wizard's tower"
   ```

3. **NPC Creation**
   ```
   "Create a mysterious merchant NPC"
   "Generate a town guard captain"
   "I need a villain for my campaign"
   ```

4. **Rules Help**
   ```
   "How does grappling work?"
   "Explain opportunity attacks"
   "What are the rules for darkness?"
   ```

### Sample Prompts

1. **Quick Combat Setup**
   ```
   User: "I need a quick forest encounter for 4 level 2 players"
   TinyDM: "Let me create a balanced forest encounter for your party...
   
   A pack of wolves has been stalking the party. You have:
   - 3 wolves (CR 1/4 each)
   - 1 dire wolf pack leader (CR 1)
   
   Tactical Setup:
   - Wolves approach from different directions
   - Pack leader waits to flank weak targets
   - Dense undergrowth provides partial cover
   
   Would you like the stat blocks or tactical suggestions?"
   ```

2. **Creative Location**
   ```
   User: "Describe a mysterious shrine in the woods"
   TinyDM: "Deep in the forest stands an ancient shrine, its stone walls wrapped in luminescent vines. 
   
   Key features:
   - Crumbling stone archway covered in unknown symbols
   - Small reflecting pool with crystal-clear water
   - Stone altar with mysterious offerings
   - Soft, ethereal humming in the air
   
   Would you like more details about the symbols, the offerings, or potential plot hooks?"
   ```

3. **Quick NPC**
   ```
   User: "Create a suspicious merchant"
   TinyDM: "Meet Darian Blacktrade:
   
   Physical: Well-dressed halfling with a silver-capped cane and nervous eyes
   Personality: Overly friendly but constantly glancing over his shoulder
   Hook: Claims to sell rare items at suspiciously low prices
   
   Would you like his inventory, mannerisms, or potential plot hooks?"
   ```

**Credit URL**: https://github.com/Cmhight03/TinyDM with honorable mention for https://www.dumbdumbdice.com/dumb-dumbs-dragons 

## License

MIT License - Feel free to use and modify for your needs.

## Contributing

This agent is part of the oTTomator agents collection. For contributions or issues, please refer to the main repository guidelines.
</file>

<file path="requirements.txt">
fastapi
uvicorn
python-dotenv
httpx
python-multipart
google-cloud-aiplatform
google-genai
websockets
supabase
</file>

<file path="setup-tinyDM.ps1">
# TinyDM Setup and Startup Script
# Save this as setup-tinyDM.ps1

# Check if running as administrator
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "Please run this script as Administrator" -ForegroundColor Red
    exit
}

# Configuration
$projectName = "TinyDM"
$projectPath = "C:\$projectName"
$pythonVersion = "3.11"
$requirementsFile = "$projectPath\requirements.txt"
$envFile = "$projectPath\.env"
$mainFile = "$projectPath\main.py"

# Create project directory
Write-Host "Creating project directory..." -ForegroundColor Green
New-Item -ItemType Directory -Force -Path $projectPath | Out-Null

# Check if Python is installed
$pythonCmd = Get-Command python -ErrorAction SilentlyContinue
if (-not $pythonCmd) {
    Write-Host "Python not found. Installing Python $pythonVersion..." -ForegroundColor Yellow
    # Download Python installer
    $pythonUrl = "https://www.python.org/ftp/python/$pythonVersion/python-$pythonVersion-amd64.exe"
    $installer = "$env:TEMP\python-installer.exe"
    Invoke-WebRequest -Uri $pythonUrl -OutFile $installer
    
    # Install Python
    Start-Process -FilePath $installer -ArgumentList "/quiet", "InstallAllUsers=1", "PrependPath=1" -Wait
    Remove-Item $installer
    
    # Refresh environment variables
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
}

# Create virtual environment
Write-Host "Setting up virtual environment..." -ForegroundColor Green
python -m venv "$projectPath\venv"

# Activate virtual environment
Write-Host "Activating virtual environment..." -ForegroundColor Green
& "$projectPath\venv\Scripts\Activate.ps1"

# Create requirements.txt
Write-Host "Creating requirements.txt..." -ForegroundColor Green
@"
fastapi==0.104.1
uvicorn==0.24.0
python-dotenv==1.0.0
supabase==2.0.3
httpx==0.25.1
python-multipart==0.0.6
google-cloud-aiplatform==1.36.4
"@ | Out-File -FilePath $requirementsFile -Encoding utf8

# Install requirements
Write-Host "Installing requirements..." -ForegroundColor Green
pip install -r $requirementsFile

# Create .env template
Write-Host "Creating .env template..." -ForegroundColor Green
@"
# Supabase Configuration
SUPABASE_URL=your-project.supabase.co
SUPABASE_KEY=your-anon-key

# Google AI Configuration
GOOGLE_APPLICATION_CREDENTIALS=path/to/your/credentials.json
GOOGLE_PROJECT_ID=your-project-id

# Server Configuration
HOST=localhost
PORT=8001
BEARER_TOKEN=your-bearer-token

# Open5e API Configuration
OPEN5E_API_URL=https://api.open5e.com/v1
"@ | Out-File -FilePath $envFile -Encoding utf8

# Create main.py
Write-Host "Creating main.py..." -ForegroundColor Green
@"
from fastapi import FastAPI, Header, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import os
import httpx
from supabase import create_client, Client
from typing import Optional
import json
import uuid

# Load environment variables
load_dotenv()

# Initialize FastAPI
app = FastAPI(title="TinyDM")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize Supabase
supabase: Client = create_client(
    os.getenv("SUPABASE_URL"),
    os.getenv("SUPABASE_KEY")
)

@app.post("/api/dm-assistant")
async def handle_request(request: dict, authorization: str = Header(None)):
    # Validate bearer token
    if authorization != f"Bearer {os.getenv('BEARER_TOKEN')}":
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        # Extract request information
        query = request.get("query")
        session_id = request.get("session_id")
        user_id = request.get("user_id")
        
        if not all([query, session_id, user_id]):
            raise HTTPException(status_code=400, detail="Missing required fields")

        # Store user message
        await store_message(session_id, "human", query)
        
        # Generate response (placeholder)
        response = "Greetings! I am TinyDM, ready to assist with your D&D session!"
        
        # Store assistant message
        await store_message(session_id, "ai", response)
        
        return {
            "success": True,
            "content": response,
            "message": {
                "type": "ai",
                "content": response
            }
        }
    
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

async def store_message(session_id: str, msg_type: str, content: str):
    message = {
        "type": msg_type,
        "content": content
    }
    
    supabase.table("messages").insert({
        "session_id": session_id,
        "message": message
    }).execute()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host=os.getenv("HOST", "localhost"),
        port=int(os.getenv("PORT", 8001)),
        reload=True
    )
"@ | Out-File -FilePath $mainFile -Encoding utf8

# Create startup script
$startupScript = @"
# Save this as start-tinyDM.ps1
Set-Location "$projectPath"
& "$projectPath\venv\Scripts\Activate.ps1"
python main.py
"@
$startupScript | Out-File -FilePath "$projectPath\start-tinyDM.ps1" -Encoding utf8

Write-Host "`nSetup complete!" -ForegroundColor Green
Write-Host "`nNext steps:" -ForegroundColor Yellow
Write-Host "1. Edit $envFile with your configuration details" -ForegroundColor Yellow
Write-Host "2. Run start-tinyDM.ps1 to start the server" -ForegroundColor Yellow
Write-Host "3. Configure Agent Zero with:" -ForegroundColor Yellow
Write-Host "   - Supabase Project URL: your-project.supabase.co" -ForegroundColor Yellow
Write-Host "   - Supabase Anon Key: your-anon-key" -ForegroundColor Yellow
Write-Host "   - Agent Endpoint: http://localhost:8001/api/dm-assistant" -ForegroundColor Yellow
Write-Host "   - Bearer Token: your-bearer-token" -ForegroundColor Yellow

# Create desktop shortcut for startup
$WshShell = New-Object -ComObject WScript.Shell
$Shortcut = $WshShell.CreateShortcut("$env:USERPROFILE\Desktop\Start TinyDM.lnk")
$Shortcut.TargetPath = "powershell.exe"
$Shortcut.Arguments = "-NoExit -File `"$projectPath\start-tinyDM.ps1`""
$Shortcut.WorkingDirectory = $projectPath
$Shortcut.Save()
</file>

</files>
