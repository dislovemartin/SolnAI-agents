This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
code_executor_agent.py
README.md
requirements.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="code_executor_agent.py">
"""
Code Executor Agent - Intelligent code execution and debugging agent for SolnAI.
Built on AutoGen v0.4.7 with Claude 3.7 Sonnet integration.
"""

import os
import sys
import logging
import tempfile
import subprocess
import json
from typing import Dict, List, Any, Optional, Union, Tuple
import asyncio

from autogen_agentchat.agents import AssistantAgent, CodeExecutorAgent
from autogen_agentchat.messages import TextMessage
from autogen_agentchat.ui import Console
from autogen_core import CancellationToken
from autogen_ext.models.anthropic import AnthropicChatCompletionClient
from autogen_core.model_context import BufferedChatCompletionContext

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SolnAICodeExecutorAgent:
    """
    Code Executor Agent for executing, debugging, and optimizing code.
    
    This agent leverages AutoGen v0.4.7 and Claude 3.7 Sonnet to:
    1. Execute code in a safe environment
    2. Debug and fix code issues
    3. Optimize code for better performance
    4. Explain code functionality
    """
    
    def __init__(
        self, 
        api_key: Optional[str] = None,
        work_dir: Optional[str] = None,
        supported_languages: Optional[List[str]] = None
    ):
        """
        Initialize the Code Executor Agent.
        
        Args:
            api_key: Anthropic API key (optional, will use environment variable if not provided)
            work_dir: Working directory for code execution (optional, will use a temp directory if not provided)
            supported_languages: List of supported programming languages (optional)
        """
        self.api_key = api_key or os.environ.get("ANTHROPIC_API_KEY")
        if not self.api_key:
            raise ValueError("Anthropic API key is required. Set ANTHROPIC_API_KEY environment variable or pass it to the constructor.")
        
        # Set up working directory
        self.work_dir = work_dir or tempfile.mkdtemp()
        os.makedirs(self.work_dir, exist_ok=True)
        logger.info(f"Working directory: {self.work_dir}")
        
        # Set supported languages
        self.supported_languages = supported_languages or ["python", "javascript", "bash", "typescript"]
        
        # Initialize the model client
        self.model_client = AnthropicChatCompletionClient(
            model="claude-3-7-sonnet",
            api_key=self.api_key,
            temperature=0.2,  # Lower temperature for more deterministic code generation
        )
        
        # Initialize the code assistant agent
        self.code_assistant = AssistantAgent(
            name="code_assistant",
            model_client=self.model_client,
            system_message=f"""You are an expert code developer and debugger. Your task is to write, execute, 
            debug, and optimize code based on user requirements.

            Follow these guidelines:
            1. Write clean, efficient, and well-documented code
            2. Follow best practices for the specific programming language
            3. Provide clear explanations of your code
            4. Debug issues thoroughly and suggest fixes
            5. Optimize code for better performance when needed
            
            You can work with the following languages: {', '.join(self.supported_languages)}
            
            When writing code:
            - Include proper error handling
            - Add comments to explain complex logic
            - Follow standard coding conventions
            - Consider edge cases
            - Write modular and reusable code
            """,
            model_context=BufferedChatCompletionContext(buffer_size=20),  # Keep a buffer of 20 messages
        )
        
        # Initialize the code executor agent
        self.executor = CodeExecutorAgent(
            name="executor",
            work_dir=self.work_dir,
            system_message="I am a code executor. I execute code and return the results.",
        )
    
    async def execute_code(self, code: str, language: str = "python") -> Dict[str, Any]:
        """
        Execute code and return the results.
        
        Args:
            code: Code to execute
            language: Programming language of the code
            
        Returns:
            Dict with execution results
        """
        if language not in self.supported_languages:
            return {
                "success": False,
                "error": f"Unsupported language: {language}. Supported languages: {', '.join(self.supported_languages)}"
            }
        
        logger.info(f"Executing {language} code")
        
        # Create a message with the code to execute
        code_message = TextMessage(
            content=f"```{language}\n{code}\n```\nPlease execute this code and return the results.",
            source="user"
        )
        
        # Execute the code
        response = await self.executor.on_messages(
            [code_message],
            cancellation_token=CancellationToken(),
        )
        
        # Extract the execution results
        execution_results = {
            "language": language,
            "code": code,
            "output": response.chat_message.content,
            "success": "error" not in response.chat_message.content.lower(),
        }
        
        return execution_results
    
    async def debug_code(self, code: str, error_message: str, language: str = "python") -> Dict[str, Any]:
        """
        Debug code and suggest fixes.
        
        Args:
            code: Code to debug
            error_message: Error message from previous execution
            language: Programming language of the code
            
        Returns:
            Dict with debugging results
        """
        if language not in self.supported_languages:
            return {
                "success": False,
                "error": f"Unsupported language: {language}. Supported languages: {', '.join(self.supported_languages)}"
            }
        
        logger.info(f"Debugging {language} code")
        
        # Create a message with the code to debug
        debug_message = TextMessage(
            content=f"""I have the following {language} code that's producing an error:
            
```{language}
{code}
```

Error message:
```
{error_message}
```

Please debug this code, explain what's wrong, and provide a fixed version.""",
            source="user"
        )
        
        # Get debugging suggestions
        response = await self.code_assistant.on_messages(
            [debug_message],
            cancellation_token=CancellationToken(),
        )
        
        # Extract the debugging results
        debugging_results = {
            "language": language,
            "original_code": code,
            "error_message": error_message,
            "analysis": response.chat_message.content,
        }
        
        # Try to extract the fixed code
        fixed_code = self._extract_code_block(response.chat_message.content, language)
        if fixed_code:
            debugging_results["fixed_code"] = fixed_code
        
        return debugging_results
    
    async def optimize_code(self, code: str, language: str = "python", optimization_goal: str = "performance") -> Dict[str, Any]:
        """
        Optimize code for better performance or readability.
        
        Args:
            code: Code to optimize
            language: Programming language of the code
            optimization_goal: Goal of optimization (performance, readability, memory)
            
        Returns:
            Dict with optimization results
        """
        if language not in self.supported_languages:
            return {
                "success": False,
                "error": f"Unsupported language: {language}. Supported languages: {', '.join(self.supported_languages)}"
            }
        
        logger.info(f"Optimizing {language} code for {optimization_goal}")
        
        # Create a message with the code to optimize
        optimize_message = TextMessage(
            content=f"""I have the following {language} code that I want to optimize for {optimization_goal}:
            
```{language}
{code}
```

Please optimize this code for {optimization_goal}, explain your optimizations, and provide the optimized version.""",
            source="user"
        )
        
        # Get optimization suggestions
        response = await self.code_assistant.on_messages(
            [optimize_message],
            cancellation_token=CancellationToken(),
        )
        
        # Extract the optimization results
        optimization_results = {
            "language": language,
            "original_code": code,
            "optimization_goal": optimization_goal,
            "analysis": response.chat_message.content,
        }
        
        # Try to extract the optimized code
        optimized_code = self._extract_code_block(response.chat_message.content, language)
        if optimized_code:
            optimization_results["optimized_code"] = optimized_code
        
        return optimization_results
    
    async def explain_code(self, code: str, language: str = "python") -> Dict[str, Any]:
        """
        Explain code functionality in detail.
        
        Args:
            code: Code to explain
            language: Programming language of the code
            
        Returns:
            Dict with explanation results
        """
        if language not in self.supported_languages:
            return {
                "success": False,
                "error": f"Unsupported language: {language}. Supported languages: {', '.join(self.supported_languages)}"
            }
        
        logger.info(f"Explaining {language} code")
        
        # Create a message with the code to explain
        explain_message = TextMessage(
            content=f"""I have the following {language} code that I want to understand better:
            
```{language}
{code}
```

Please explain this code in detail, including:
1. Overall purpose
2. How it works
3. Key components and their functions
4. Any potential issues or limitations
5. Suggestions for improvement""",
            source="user"
        )
        
        # Get explanation
        response = await self.code_assistant.on_messages(
            [explain_message],
            cancellation_token=CancellationToken(),
        )
        
        # Extract the explanation results
        explanation_results = {
            "language": language,
            "code": code,
            "explanation": response.chat_message.content,
        }
        
        return explanation_results
    
    async def generate_code(self, requirements: str, language: str = "python") -> Dict[str, Any]:
        """
        Generate code based on requirements.
        
        Args:
            requirements: Requirements for the code
            language: Programming language to use
            
        Returns:
            Dict with generated code
        """
        if language not in self.supported_languages:
            return {
                "success": False,
                "error": f"Unsupported language: {language}. Supported languages: {', '.join(self.supported_languages)}"
            }
        
        logger.info(f"Generating {language} code based on requirements")
        
        # Create a message with the requirements
        generate_message = TextMessage(
            content=f"""I need {language} code that meets the following requirements:
            
{requirements}

Please write clean, efficient, and well-documented code that meets these requirements.""",
            source="user"
        )
        
        # Generate code
        response = await self.code_assistant.on_messages(
            [generate_message],
            cancellation_token=CancellationToken(),
        )
        
        # Extract the generated code
        generation_results = {
            "language": language,
            "requirements": requirements,
            "response": response.chat_message.content,
        }
        
        # Try to extract the generated code
        generated_code = self._extract_code_block(response.chat_message.content, language)
        if generated_code:
            generation_results["generated_code"] = generated_code
        
        return generation_results
    
    async def run_interactive_session(self) -> None:
        """
        Run an interactive code development session.
        """
        logger.info("Starting interactive code development session")
        
        # Create a console for interaction
        await Console(
            self.code_assistant.on_messages_stream(
                [TextMessage(content="I'm ready to help with your code. What would you like to do?", source="user")],
                cancellation_token=CancellationToken(),
            ),
            output_stats=True,
        )
    
    def _extract_code_block(self, text: str, language: str) -> Optional[str]:
        """
        Extract code block from text.
        
        Args:
            text: Text containing code block
            language: Programming language of the code
            
        Returns:
            Extracted code or None if not found
        """
        import re
        
        # Pattern to match code blocks with the specified language
        pattern = f"```(?:{language})?\\n(.*?)\\n```"
        matches = re.findall(pattern, text, re.DOTALL)
        
        if matches:
            return matches[0].strip()
        
        return None


# Example usage
if __name__ == "__main__":
    # Initialize the agent
    agent = SolnAICodeExecutorAgent()
    
    # Example code to execute
    code = """
def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    
    fib = [0, 1]
    for i in range(2, n):
        fib.append(fib[i-1] + fib[i-2])
    
    return fib

# Test the function
result = fibonacci(10)
print(f"Fibonacci sequence: {result}")
"""
    
    # Execute the code
    asyncio.run(agent.execute_code(code, "python"))
</file>

<file path="README.md">
# Code Executor Agent for SolnAI

## Overview

The Code Executor Agent is an intelligent assistant built on AutoGen v0.4.7 that specializes in executing, debugging, optimizing, and explaining code. It leverages Claude 3.7 Sonnet to provide high-quality code development capabilities within the SolnAI ecosystem.

## Features

- **Code Execution**: Safely executes code in various programming languages
- **Debugging**: Identifies and fixes code issues with detailed explanations
- **Optimization**: Improves code for better performance, readability, or memory usage
- **Code Explanation**: Provides detailed explanations of code functionality
- **Code Generation**: Creates code based on specific requirements
- **Interactive Sessions**: Supports interactive code development sessions

## Architecture

The Code Executor Agent is built using the following components:

- **AutoGen v0.4.7**: Provides the multi-agent framework
- **Claude 3.7 Sonnet**: Powers the code understanding and generation
- **AssistantAgent**: Handles code analysis, debugging, and optimization
- **CodeExecutorAgent**: Manages safe code execution
- **BufferedChatCompletionContext**: Maintains conversation context efficiently

## Installation

### Prerequisites

- Python 3.8 or higher
- AutoGen v0.4.7
- Anthropic API key

### Setup

1. Clone the repository:
   ```bash
   git clone https://github.com/your-org/solnai-app.git
   cd solnai-app/SolnAI-agents/code-executor-agent
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Set up your environment variables:
   ```bash
   export ANTHROPIC_API_KEY="your_anthropic_api_key"
   ```

## Usage

### Executing Code

```python
import asyncio
from code_executor_agent import SolnAICodeExecutorAgent

async def main():
    # Initialize the agent
    agent = SolnAICodeExecutorAgent()
    
    # Code to execute
    python_code = """
    def greet(name):
        return f"Hello, {name}!"
    
    result = greet("World")
    print(result)
    """
    
    # Execute the code
    result = await agent.execute_code(python_code, language="python")
    
    # Print the execution result
    print(result["output"])

# Run the example
asyncio.run(main())
```

### Debugging Code

```python
import asyncio
from code_executor_agent import SolnAICodeExecutorAgent

async def main():
    # Initialize the agent
    agent = SolnAICodeExecutorAgent()
    
    # Code with a bug
    buggy_code = """
    def divide(a, b):
        return a / b
    
    result = divide(10, 0)
    print(result)
    """
    
    # Error message from execution
    error_message = "ZeroDivisionError: division by zero"
    
    # Debug the code
    result = await agent.debug_code(buggy_code, error_message, language="python")
    
    # Print the debugging analysis
    print(result["analysis"])
    
    # Print the fixed code if available
    if "fixed_code" in result:
        print("\nFixed code:")
        print(result["fixed_code"])

# Run the example
asyncio.run(main())
```

### Optimizing Code

```python
import asyncio
from code_executor_agent import SolnAICodeExecutorAgent

async def main():
    # Initialize the agent
    agent = SolnAICodeExecutorAgent()
    
    # Code to optimize
    code_to_optimize = """
    def fibonacci(n):
        if n <= 0:
            return []
        
        fib = []
        for i in range(n):
            if i <= 1:
                fib.append(i)
            else:
                fib.append(fib[i-1] + fib[i-2])
        
        return fib
    
    result = fibonacci(20)
    print(result)
    """
    
    # Optimize the code for performance
    result = await agent.optimize_code(
        code_to_optimize, 
        language="python", 
        optimization_goal="performance"
    )
    
    # Print the optimization analysis
    print(result["analysis"])
    
    # Print the optimized code if available
    if "optimized_code" in result:
        print("\nOptimized code:")
        print(result["optimized_code"])

# Run the example
asyncio.run(main())
```

### Interactive Session

```python
import asyncio
from code_executor_agent import SolnAICodeExecutorAgent

async def main():
    # Initialize the agent
    agent = SolnAICodeExecutorAgent()
    
    # Start an interactive code development session
    await agent.run_interactive_session()

# Run the example
asyncio.run(main())
```

## API Reference

### `SolnAICodeExecutorAgent`

The main class that provides code execution and development capabilities.

#### Methods

- `execute_code(code: str, language: str = "python") -> Dict[str, Any]`: Executes code and returns the results
- `debug_code(code: str, error_message: str, language: str = "python") -> Dict[str, Any]`: Debugs code and suggests fixes
- `optimize_code(code: str, language: str = "python", optimization_goal: str = "performance") -> Dict[str, Any]`: Optimizes code for a specific goal
- `explain_code(code: str, language: str = "python") -> Dict[str, Any]`: Explains code functionality in detail
- `generate_code(requirements: str, language: str = "python") -> Dict[str, Any]`: Generates code based on requirements
- `run_interactive_session() -> None`: Runs an interactive code development session

## Supported Languages

The Code Executor Agent supports the following programming languages by default:

- Python
- JavaScript
- TypeScript
- Bash

Additional languages can be added by specifying them in the `supported_languages` parameter during initialization.

## Integration with SolnAI

The Code Executor Agent is designed to integrate seamlessly with other SolnAI agents:

- Can be used by the Research Agent to execute code for data analysis
- Works with Crawl4AI agent to process and analyze crawled data
- Supports multi-agent workflows for complex code development tasks

## Security Considerations

The Code Executor Agent executes code in a controlled environment, but there are still security considerations to keep in mind:

- Code execution is performed in a sandboxed environment
- Avoid executing untrusted code that may have malicious intent
- Set appropriate resource limits to prevent excessive resource consumption
- Consider using Docker containers for additional isolation

## Limitations

- The current implementation executes code in the local environment
- Performance depends on the quality of the Claude 3.7 Sonnet model and its API availability
- Complex debugging may require multiple iterations

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
</file>

<file path="requirements.txt">
autogen-agentchat==0.4.7
autogen-core==0.2.11
autogen-ext==0.2.11
anthropic>=0.18.0
requests>=2.31.0
python-dotenv>=1.0.0
</file>

</files>
