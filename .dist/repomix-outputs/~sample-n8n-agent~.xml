This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
Agent_Node_Sample_Agent.json
Base_Sample_Agent.json
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Agent_Node_Sample_Agent.json">
{
  "name": "Agent Node Sample Agent",
  "nodes": [
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "X-n8n-Signature",
                "value": "EvtIS^EBVISeie6svB@6ev"
              }
            ]
          }
        }
      },
      "id": "c92dfb4d-571a-4e08-ba92-4216404ec455",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1700,
        400
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ee2bcd57-3b4c-43f9-b4b7-3a25687b9a68",
              "name": "query",
              "value": "={{ $json.body.query }}",
              "type": "string"
            },
            {
              "id": "63f23e51-af2b-47c4-a288-5abaf9b6c357",
              "name": "user_id",
              "value": "={{ $json.body.user_id }}",
              "type": "string"
            },
            {
              "id": "b97a3670-8a87-481b-8695-db44624be7d8",
              "name": "request_id",
              "value": "={{ $json.body.request_id }}",
              "type": "string"
            },
            {
              "id": "7d3fa06d-08f7-4517-b9c5-3c46ff476f55",
              "name": "session_id",
              "value": "={{ $json.body.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e423ed64-4664-4e34-b7c2-d71148963a24",
      "name": "Prep Input Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        760,
        400
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b5eaa2a2-a6bc-40ab-af5e-baa8a5dda1a7",
              "name": "success",
              "value": "=true",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "5881a308-ab65-4034-a449-9c1f0d90743e",
      "name": "Prep Output Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1460,
        400
      ]
    },
    {
      "parameters": {
        "model": "claude-3-5-haiku-20241022",
        "options": {}
      },
      "id": "66920cf0-b301-4d0e-80ec-204696fdbf76",
      "name": "Anthropic Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.2,
      "position": [
        980,
        620
      ],
      "credentials": {
        "anthropicApi": {
          "id": "AiDvkdxUFBeRQmnE",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$('Prep Input Fields').item.json.session_id}}",
        "tableName": "messages",
        "contextWindowLength": 10
      },
      "id": "1c06de3a-8fc4-4ccf-9dc7-b9f1f5bf692a",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1100,
        620
      ],
      "credentials": {
        "postgres": {
          "id": "erIa9T64hNNeDuvB",
          "name": "Prod Postgres account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d9fec84b-86f0-4230-9fd4-c1cb392ff8b5",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d6540989-6349-47aa-8c2a-8dd93b262b6e",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        500,
        400
      ],
      "webhookId": "d9fec84b-86f0-4230-9fd4-c1cb392ff8b5",
      "credentials": {
        "httpHeaderAuth": {
          "id": "o5akNgXQQR74Sezh",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Agent Node Sample Agent\n\nAuthor: [Cole Medin](https://www.youtube.com/@ColeMedin)\n\nThis is a sample n8n workflow that demonstrates the minimal required components to build an agent for the oTTomator autogen_studio using the \"Agent\" node in n8n. The \"Agent\" node manages conversation history itself and is compatible with the autogen_studio.\n\n## Core Components\n\n1. **Webhook Endpoint**\n   - Accepts POST requests with authentication\n   - Processes incoming queries with user and session information\n   - Provides secure communication via header authentication\n\n2. **Input Processing**\n   - Extracts key fields from incoming requests:\n     - query: The user's question or command\n     - user_id: Unique identifier for the user\n     - request_id: Request tracking ID\n     - session_id: Current session identifier\n\n3. **Database Integration**\n   - Uses Supabase for message storage\n   - Records both user messages and AI responses\n   - Maintains conversation history with metadata\n\n4. **Response Handling**\n   - Structured response format for consistency\n   - Includes success/failure status\n   - Returns formatted responses via webhook",
        "height": 763.4375,
        "width": 589.875,
        "color": 6
      },
      "id": "19bfc66c-0bfa-414c-b234-057b05873c75",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        200
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$('Prep Input Fields').item.json.query}}",
        "options": {
          "systemMessage": "=Enter your system message here..."
        }
      },
      "id": "24599191-6cd2-4b7b-aade-cf45dd1ccbb6",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1040,
        400
      ]
    },
    {
      "parameters": {
        "content": "## Add your own agent tools and feel free to use any provider and LLM.",
        "height": 100.31395348837148,
        "width": 422.59302325581405,
        "color": 6
      },
      "id": "0376123d-d772-4e74-a217-b1bac0e365fb",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        760
      ]
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.[your n8n url].com",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "content-length": "192",
            "accept": "*/*",
            "accept-encoding": "deflate, gzip",
            "authorization": "Bearer YOUR BEARER TOKEN",
            "content-type": "application/json",
            "x-forwarded-for": "64.227.21.251",
            "x-forwarded-host": "n8n.[your n8n url].com",
            "x-forwarded-proto": "https",
            "x-real-ip": "2601:441:4380:40b0:b4b3:724b:27e1:c4ba"
          },
          "params": {},
          "query": {},
          "body": {
            "query": "Supabase",
            "user_id": "google-oauth2|116467443974012389959",
            "request_id": "f98asdyf987yasd0f987asdf8",
            "session_id": "google-oauth2|116467443974012389959~2~8dfbddbe603d"
          },
          "webhookUrl": "https://n8n.[your n8n url].com/webhook-test/invoke-agent",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "Prep Output Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Prep Input Fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Prep Input Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Prep Output Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8e077fe3-9da1-496b-a2e5-18ae1676f71c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f65a08c0adc90a3cde2c633d24c6daecde3817033b75588ee10a781b0b7aa3f5"
  },
  "id": "a4lg63apQMOxsg5A",
  "tags": [
    {
      "createdAt": "2024-12-10T13:21:06.912Z",
      "updatedAt": "2024-12-10T13:21:06.912Z",
      "id": "0tXJXfH2daB7QdK5",
      "name": "studio-test"
    }
  ]
}
</file>

<file path="Base_Sample_Agent.json">
{
  "name": "Base Agent",
  "nodes": [
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "X-n8n-Signature",
                "value": "EvtIS^EBVISeie6svB@6ev"
              }
            ]
          }
        }
      },
      "id": "d8db86be-41fa-4c77-a5db-e2c693f809d5",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1860,
        460
      ]
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $json.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ {\n\"type\": \"human\",\n\"content\": $json.query,\n\"additional_kwargs\": {},\n\"response_metadata\": {}\n} }}"
            }
          ]
        }
      },
      "id": "107240de-b57c-4d5e-bd85-e65a7636bbf5",
      "name": "Add User Message to DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        920,
        460
      ],
      "credentials": {
        "supabaseApi": {
          "id": "hOLIm3Jeg9JcG616",
          "name": "Prod Supabase account"
        }
      }
    },
    {
      "parameters": {
        "tableId": "messages",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('Prep Input Fields').first().json.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "={{ {\n\"type\": \"ai\",\n\"content\": $json.output,\n\"data\": $json.data,\n\"additional_kwargs\": {},\n\"response_metadata\": {}\n} }}"
            }
          ]
        }
      },
      "id": "9ab25498-76c0-43c9-a477-fc8329cce13b",
      "name": "Add AI Message to DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1400,
        460
      ],
      "credentials": {
        "supabaseApi": {
          "id": "hOLIm3Jeg9JcG616",
          "name": "Prod Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ee2bcd57-3b4c-43f9-b4b7-3a25687b9a68",
              "name": "query",
              "value": "={{ $json.body.query }}",
              "type": "string"
            },
            {
              "id": "63f23e51-af2b-47c4-a288-5abaf9b6c357",
              "name": "user_id",
              "value": "={{ $json.body.user_id }}",
              "type": "string"
            },
            {
              "id": "b97a3670-8a87-481b-8695-db44624be7d8",
              "name": "request_id",
              "value": "={{ $json.body.request_id }}",
              "type": "string"
            },
            {
              "id": "7d3fa06d-08f7-4517-b9c5-3c46ff476f55",
              "name": "session_id",
              "value": "={{ $json.body.session_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "a5644326-09b5-4927-a317-103cfbd91c75",
      "name": "Prep Input Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        700,
        460
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b5eaa2a2-a6bc-40ab-af5e-baa8a5dda1a7",
              "name": "success",
              "value": "=true",
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "id": "f0da2b47-0252-45bf-948b-3729acbaeccd",
      "name": "Prep Output Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1640,
        460
      ]
    },
    {
      "parameters": {
        "content": "# Base Sample Agent\n\nAuthor: [Cole Medin](https://www.youtube.com/@ColeMedin)\n\nThis is a sample n8n workflow that demonstrates the minimal required components to build an agent for the oTTomator autogen_studio. It serves as a template and reference implementation for creating new agents.\n\n## Core Components\n\n1. **Webhook Endpoint**\n   - Accepts POST requests with authentication\n   - Processes incoming queries with user and session information\n   - Provides secure communication via header authentication\n\n2. **Input Processing**\n   - Extracts key fields from incoming requests:\n     - query: The user's question or command\n     - user_id: Unique identifier for the user\n     - request_id: Request tracking ID\n     - session_id: Current session identifier\n\n3. **Database Integration**\n   - Uses Supabase for message storage\n   - Records both user messages and AI responses\n   - Maintains conversation history with metadata\n\n4. **Response Handling**\n   - Structured response format for consistency\n   - Includes success/failure status\n   - Returns formatted responses via webhook",
        "height": 763.4375,
        "width": 589.875,
        "color": 6
      },
      "id": "5100d7c2-0c89-4922-a0ce-9e0df54714f9",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -220,
        140
      ]
    },
    {
      "parameters": {
        "content": "## Add agent logic here\n\nThis can be anything that generates output to store as the \"AI message\" in the node to the right.\n\nSee the other example n8n workflow in GitHub to see how to use the \"Agent\" node in n8n instead of this setup.",
        "height": 235,
        "width": 267.5,
        "color": 6
      },
      "id": "9c0e546d-57d9-476c-bba5-100731cbb950",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1080,
        460
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9a6c4630-b422-4d42-b894-81ecfe881ffe",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "85c600ae-5695-4bf5-b6dd-9e7426fb89df",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        460,
        460
      ],
      "webhookId": "9a6c4630-b422-4d42-b894-81ecfe881ffe",
      "credentials": {
        "httpHeaderAuth": {
          "id": "o5akNgXQQR74Sezh",
          "name": "Header Auth account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.[your n8n url].com",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
            "content-length": "192",
            "accept": "*/*",
            "accept-encoding": "deflate, gzip",
            "authorization": "Bearer YOUR BEARER TOKEN",
            "content-type": "application/json",
            "x-forwarded-for": "64.227.21.251",
            "x-forwarded-host": "n8n.[your n8n url].com",
            "x-forwarded-proto": "https",
            "x-real-ip": "2601:441:4380:40b0:b4b3:724b:27e1:c4ba"
          },
          "params": {},
          "query": {},
          "body": {
            "query": "Supabase",
            "user_id": "google-oauth2|116467443974012389959",
            "request_id": "f98asdyf987yasd0f987asdf8",
            "session_id": "google-oauth2|116467443974012389959~2~8dfbddbe603d"
          },
          "webhookUrl": "https://n8n.[your n8n url].com/webhook-test/invoke-agent",
          "executionMode": "test"
        }
      }
    ]
  },
  "connections": {
    "Add User Message to DB": {
      "main": [
        [
          {
            "node": "Add AI Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add AI Message to DB": {
      "main": [
        [
          {
            "node": "Prep Output Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Input Fields": {
      "main": [
        [
          {
            "node": "Add User Message to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep Output Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Prep Input Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "11f80a9b-342c-4619-b972-0d925afb09fa",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f65a08c0adc90a3cde2c633d24c6daecde3817033b75588ee10a781b0b7aa3f5"
  },
  "id": "y0OhDoLH2yJZVJpU",
  "tags": [
    {
      "createdAt": "2024-12-10T13:21:06.912Z",
      "updatedAt": "2024-12-10T13:21:06.912Z",
      "id": "0tXJXfH2daB7QdK5",
      "name": "studio-test"
    }
  ]
}
</file>

<file path="README.md">
# Base Sample n8n Agent

Author: [Cole Medin](https://www.youtube.com/@ColeMedin)

This is a sample n8n workflow that demonstrates the minimal required components to build an agent for the autogen_studio. It serves as a template and reference implementation for creating new agents.

## Available Workflows

This repository includes two n8n workflow implementations:

1. **Base Sample Agent** (`Base_Sample_Agent.json`)
   - The primary workflow that demonstrates how to manage input, output, and conversation history for the autogen_studio
   - Recommended for most use cases
   - Provides complete control over conversation history management
   - Uses Supabase for message storage

2. **Agent Node Sample** (`Agent_Node_Sample_Agent.json`)
   - A variation that utilizes n8n's built-in "Agent" node
   - Simplified implementation where conversation history is managed by the Agent node
   - Fully compatible with the autogen_studio
   - Ideal for simpler agent use cases

## Core Components

1. **Webhook Endpoint**
   - Accepts POST requests with authentication
   - Processes incoming queries with user and session information
   - Provides secure communication via header authentication

2. **Input Processing**
   - Extracts key fields from incoming requests:
     - query: The user's question or command
     - user_id: Unique identifier for the user
     - request_id: Request tracking ID
     - session_id: Current session identifier

3. **Database Integration**
   - Uses Supabase for message storage (Agent Node variation is any Postgres database)
   - Records both user messages and AI responses
   - Maintains conversation history with metadata

4. **Response Handling**
   - Structured response format for consistency
   - Includes success/failure status
   - Returns formatted responses via webhook

## Workflow Structure

1. **Webhook Node**
   - Entry point for all requests
   - Validates authentication headers (optional, we can add once we host for you on the Studio)
   - Routes incoming POST requests

2. **Prep Input Fields Node**
   - Extracts and formats input data
   - Validates required fields
   - Prepares data for processing

3. **Database Nodes**
   - "Add User Message to DB": Records incoming user queries
   - "Add AI Message to DB": Stores AI responses
   - For the Agent Node variation, this is handled by the "Agent" node

4. **Output Preparation**
   - Sets success status
   - Formats response data
   - Ensures consistent output structure

## Credentials

1. **Header Auth**
   - Used for webhook authentication
   - Ensures secure communication

2. **Supabase API**
   - Required for database operations
   - Stores conversation history

   These credentials will be swapped over to our own once we host the agent for you!

## Usage

1. Import this workflow as a template for new agents
2. Configure the required credentials:
   - Set up header authentication (optional, we can add once we host for you on the Studio)
   - Configure Supabase connection
3. Customize the workflow by adding:
   - Additional processing nodes
   - Specialized AI model integrations
   - Custom business logic

## Message Format

### Input
```json
{
    "query": "User's question or command",
    "user_id": "unique-user-identifier",
    "request_id": "request-tracking-id",
    "session_id": "conversation-session-id"
}
```

### Output
```json
{
    "success": true,
    "output": "AI response content",
    "data": "Additional response data"
}
```

## Contributing

This agent is part of the oTTomator agents collection. For contributions or issues, please refer to the main repository guidelines.
</file>

</files>
